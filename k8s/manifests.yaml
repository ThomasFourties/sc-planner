---
# NAMESPACE
apiVersion: v1
kind: Namespace
metadata:
  name: sc-planner
  labels:
    name: sc-planner

---
# SECRETS
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: sc-planner
type: Opaque
data:
  JWT_SECRET: c3VwZXJzZWNyZXRqd3RrZXkyMDI0    # supersecretjwtkey2024
  NODE_ENV: ZGV2ZWxvcG1lbnQ=                   # development
  LOG_LEVEL: aW5mbw==                          # info

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: sc-planner
type: Opaque
data:
  POSTGRES_PASSWORD: cGFzc3dvcmQ=              # password
  POSTGRES_USER: dXNlcg==                      # user
  POSTGRES_DB: ZGI=                            # db

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  namespace: sc-planner
type: Opaque
data:
  REDIS_PASSWORD: cGFzc3dvcmQ=                 # password

---
# CONFIGMAP
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: sc-planner
data:
  POSTGRES_HOST: "postgres-master"
  POSTGRES_PORT: "5432"
  POSTGRES_REPLICA_HOST: "postgres-replica"
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  AUTH_SERVICE_PORT: "3001"
  USER_SERVICE_PORT: "3002"
  TASK_SERVICE_PORT: "3003"
  CLIENT_SERVICE_PORT: "3004"
  PROJECT_SERVICE_PORT: "3005"
  MONITORING_SERVICE_PORT: "3006"
  CIRCUIT_BREAKER_TIMEOUT: "30000"
  CIRCUIT_BREAKER_MAX_REQUESTS: "100"
  FRONTEND_PORT: "80"
  API_BASE_URL: "http://nginx-ingress/api"

---
# PERSISTENT VOLUMES
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-master-pvc
  namespace: sc-planner
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-replica-pvc
  namespace: sc-planner
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard

---
# DATABASE - POSTGRES MASTER
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-master
  namespace: sc-planner
  labels:
    app: postgres-master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-master
  template:
    metadata:
      labels:
        app: postgres-master
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "sc-planner"
        - name: POSTGRES_USER
          value: "user"
        - name: POSTGRES_PASSWORD
          value: "password"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-master-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-master
  namespace: sc-planner
spec:
  selector:
    app: postgres-master
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# DATABASE - POSTGRES REPLICA
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-replica
  namespace: sc-planner
  labels:
    app: postgres-replica
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-replica
  template:
    metadata:
      labels:
        app: postgres-replica
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "sc-planner"
        - name: POSTGRES_USER
          value: "user"
        - name: POSTGRES_PASSWORD
          value: "password"
        - name: POSTGRES_MASTER_HOST
          value: "postgres-master"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-replica-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica
  namespace: sc-planner
spec:
  selector:
    app: postgres-replica
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP

---
# REDIS
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: sc-planner
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          value: "password"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: sc-planner
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP

---
# BACKEND SERVICES - AUTH
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: sc-planner
  labels:
    app: auth-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      containers:
      - name: auth-service
        image: nginx:alpine
        ports:
        - containerPort: 3001
        env:
        - name: PORT
          value: "3001"
        - name: SERVICE_NAME
          value: "auth-service"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: sc-planner
spec:
  selector:
    app: auth-service
  ports:
  - port: 3001
    targetPort: 3001
  type: ClusterIP

---
# BACKEND SERVICES - USER
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: sc-planner
  labels:
    app: user-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: nginx:alpine
        ports:
        - containerPort: 3002
        env:
        - name: PORT
          value: "3002"
        - name: SERVICE_NAME
          value: "user-service"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: sc-planner
spec:
  selector:
    app: user-service
  ports:
  - port: 3002
    targetPort: 3002
  type: ClusterIP

---
# BACKEND SERVICES - TASK
apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-service
  namespace: sc-planner
  labels:
    app: task-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: task-service
  template:
    metadata:
      labels:
        app: task-service
    spec:
      containers:
      - name: task-service
        image: nginx:alpine
        ports:
        - containerPort: 3003
        env:
        - name: PORT
          value: "3003"
        - name: SERVICE_NAME
          value: "task-service"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: task-service
  namespace: sc-planner
spec:
  selector:
    app: task-service
  ports:
  - port: 3003
    targetPort: 3003
  type: ClusterIP

---
# BACKEND SERVICES - CLIENT
apiVersion: apps/v1
kind: Deployment
metadata:
  name: client-service
  namespace: sc-planner
  labels:
    app: client-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: client-service
  template:
    metadata:
      labels:
        app: client-service
    spec:
      containers:
      - name: client-service
        image: nginx:alpine
        ports:
        - containerPort: 3004
        env:
        - name: PORT
          value: "3004"
        - name: SERVICE_NAME
          value: "client-service"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: client-service
  namespace: sc-planner
spec:
  selector:
    app: client-service
  ports:
  - port: 3004
    targetPort: 3004
  type: ClusterIP

---
# BACKEND SERVICES - PROJECT
apiVersion: apps/v1
kind: Deployment
metadata:
  name: project-service
  namespace: sc-planner
  labels:
    app: project-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: project-service
  template:
    metadata:
      labels:
        app: project-service
    spec:
      containers:
      - name: project-service
        image: nginx:alpine
        ports:
        - containerPort: 3005
        env:
        - name: PORT
          value: "3005"
        - name: SERVICE_NAME
          value: "project-service"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: project-service
  namespace: sc-planner
spec:
  selector:
    app: project-service
  ports:
  - port: 3005
    targetPort: 3005
  type: ClusterIP

---
# BACKEND SERVICES - MONITORING
apiVersion: apps/v1
kind: Deployment
metadata:
  name: monitoring-service
  namespace: sc-planner
  labels:
    app: monitoring-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: monitoring-service
  template:
    metadata:
      labels:
        app: monitoring-service
    spec:
      containers:
      - name: monitoring-service
        image: nginx:alpine
        ports:
        - containerPort: 3006
        env:
        - name: PORT
          value: "3006"
        - name: SERVICE_NAME
          value: "monitoring-service"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: monitoring-service
  namespace: sc-planner
spec:
  selector:
    app: monitoring-service
  ports:
  - port: 3006
    targetPort: 3006
  type: ClusterIP

---
# FRONTEND
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: sc-planner
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: nginx:alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: sc-planner
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# INGRESS
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sc-planner-ingress
  namespace: sc-planner
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  ingressClassName: nginx
  rules:
  - host: sc-planner.local
    http:
      paths:
      # Frontend route - serve the main application
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80
      # API routes - direct routing to backend services
      - path: /api/auth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 3001
      - path: /api/users
        pathType: Prefix
        backend:
          service:
            name: user-service
            port:
              number: 3002
      - path: /api/tasks
        pathType: Prefix
        backend:
          service:
            name: task-service
            port:
              number: 3003
      # Health checks for individual services
      - path: /health/auth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 3001
      - path: /health/users
        pathType: Prefix
        backend:
          service:
            name: user-service
            port:
              number: 3002
      - path: /health/tasks
        pathType: Prefix
        backend:
          service:
            name: task-service
            port:
              number: 3003

---
# RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sc-planner-serviceaccount
  namespace: sc-planner

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sc-planner-clusterrole
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sc-planner-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: sc-planner-clusterrole
subjects:
- kind: ServiceAccount
  name: sc-planner-serviceaccount
  namespace: sc-planner

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dashboard-admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: dashboard-admin-user
  namespace: kubernetes-dashboard

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: auth-service-hpa
  namespace: sc-planner
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: auth-service
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: task-service-hpa
  namespace: sc-planner
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: task-service
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: user-service-hpa
  namespace: sc-planner
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: user-service
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: client-service-hpa
  namespace: sc-planner
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: client-service
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: project-service-hpa
  namespace: sc-planner
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: project-service
  minReplicas: 2
  maxReplicas: 8
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: frontend-hpa
  namespace: sc-planner
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: frontend
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70 
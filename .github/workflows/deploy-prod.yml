name: Deploy to Production Server

# on:
#   push:
#     branches:
#     - master

jobs:
  changes:
    name: Check for changes
    runs-on: ubuntu-22.04
    outputs:
      client: ${{ steps.changes.outputs.client }}
      server: ${{ steps.changes.outputs.server }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        base: ${{ github.event.before }}
        filters: |
          client:
            - 'client/**'
            - '.github/workflows/main.yml'
          server:
            - 'server/**'
            - '.github/workflows/main.yml'

  client:
    name: Build and Push Client
    needs: changes
    if: ${{ needs.changes.outputs.client == 'true' }}
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get exact Git tag if exists
      id: git_tag
      run: |
        TAG=$(git tag --points-at HEAD | head -n1 || echo "")
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Exact tag on HEAD: $TAG"

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        logout: true

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: '{{defaultContext}}:client'
        push: true
        tags: |
          thoomaas123/sc-planner-client:latest
          ${{ steps.git_tag.outputs.tag && format('thoomaas123/sc-planner-client:{0}', steps.git_tag.outputs.tag) }}

  server:
    name: Build and Push Server
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' }}
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get exact Git tag on HEAD
      id: git_tag
      run: |
        TAG=$(git tag --points-at HEAD | head -n1 || echo "")
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Exact tag on HEAD: $TAG"

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        logout: true

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: '{{defaultContext}}:server'
        push: true
        tags: |
          thoomaas123/sc-planner-server:latest
          ${{ steps.git_tag.outputs.tag && format('thoomaas123/sc-planner-server:{0}', steps.git_tag.outputs.tag) }}

  deploy:
    name: Deploy to Production Server
    needs: [ client, server ]
    if: |
      always() && !failure() && !cancelled()
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get latest Git tag
      id: git_tag
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"

    - name: SSH to production server and deploy
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME  }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        script: |
          cd /var/www/vhosts/thomasfourties.fr/sc-planner.thomasfourties.fr
          eval $(ssh-agent) ssh-add ~/.ssh/thomas
          git pull origin master

          export CLIENT_TAG=${{ steps.git_tag.outputs.tag }}
          export SERVER_TAG=${{ steps.git_tag.outputs.tag }}

          docker-compose -f docker-compose.prod.yml down
          docker-compose -f docker-compose.prod.yml up -d

          docker volume prune -f
          docker image prune -f

  cleanup:
    name: Cleanup Staging Images
    needs: [ deploy ]
    if: success()
    runs-on: ubuntu-22.04
    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        logout: true

    - name: Cleanup staging images
      run: |
        STAGING_IMAGES=$(docker images thoomaas123/sc-planner-*:staging-* --format "{{.Repository}}:{{.Tag}}")

        for image in $STAGING_IMAGES; do
          docker rmi $image || true
        done

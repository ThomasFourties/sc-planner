name: Deploy to Staging Server

on:
  push:
    branches:
    - dev

jobs:
  changes:
    name: Check for changes
    runs-on: ubuntu-22.04
    outputs:
      client: ${{ steps.changes.outputs.client }}
      server: ${{ steps.changes.outputs.server }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        base: ${{ github.event.before }}
        filters: |
          client:
            - 'client/**'
            - '.github/workflows/main.yml'
          server:
            - 'server/**'
            - '.github/workflows/main.yml'

  client:
    name: Build and Push Client
    needs: changes
    if: ${{ needs.changes.outputs.client == 'true' }}
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get latest Git tag
      id: git_tag
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        logout: true

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Short SHA
      id: short_sha
      run: echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: '{{defaultContext}}:client'
        push: true
        tags: |
          thoomaas123/sc-planner-client:staging-${{ steps.short_sha.outputs.sha_short }}

  server:
    name: Build and Push Server
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' }}
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get latest Git tag
      id: git_tag
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        logout: true

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Short SHA
      id: short_sha
      run: echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: '{{defaultContext}}:server'
        push: true
        tags: |
          thoomaas123/sc-planner-server:staging-${{ steps.short_sha.outputs.sha_short }}

  deploy:
    name: Deploy to Staging Server
    needs: [ client, server ]
    if: |
      always() && !failure() && !cancelled()
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get latest Git tag
      id: git_tag
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"

    - name: SSH to staging server and deploy
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        password: ${{ secrets.STAGING_PASSWORD }}
        port: 22
        script: |
          cd /var/www/vhosts/thomasfourties.fr/staging.sc-planner.thomasfourties.fr
          eval $(ssh-agent) ssh-add ~/.ssh/thomas
          git pull origin dev

          export CLIENT_TAG=${{ steps.git_tag.outputs.tag }}
          export SERVER_TAG=${{ steps.git_tag.outputs.tag }}

          docker-compose -f docker-compose.prod.yml pull
          docker-compose -f docker-compose.prod.yml up -d --remove-orphans

    - name: Clean up unused images
      run: |
        docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | while read -r line; do
          image_tag=$(echo $line | awk '{print $1}')
          image_id=$(echo $line | awk '{print $2}')

          in_use=$(docker ps -a --format "{{.Image}}" | grep -w "$image_tag" || true)
          is_staging=$(echo $image_tag | grep -E 'staging-[a-f0-9]{7}$' || true)

          if [[ -z "$in_use" && -z "$is_staging" ]]; then
            echo "Removing image: $image_tag ($image_id)"
            docker rmi -f "$image_id" || true
          fi
        done
name: Deploy to Staging Server

on:
  push:
    branches:
      - dev

jobs:
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-22.04
    outputs:
      client: ${{ steps.filter.outputs.client }}
      server: ${{ steps.filter.outputs.server }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.event.before }}
          filters: |
            client:
              - 'client/**'
            server:
              - 'server/**'

  test:
    name: 🧪 Test Server
    needs: changes
    if: ${{ fromJSON(needs.changes.outputs.server) }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Install server dependencies
        run: |
          cd server
          npm install
      - name: Run tests
        run: |
          cd server
          npm run test

  build:
    name: 🚀 Build & Push Images
    needs: changes
    if: ${{ fromJSON(needs.changes.outputs.client) || fromJSON(needs.changes.outputs.server) }}
    runs-on: ubuntu-22.04
    outputs:
      sha_short: ${{ steps.short_sha.outputs.sha_short }}
      client_changed: ${{ fromJSON(needs.changes.outputs.client) }}
      server_changed: ${{ fromJSON(needs.changes.outputs.server) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🔢 Extract short SHA
        id: short_sha
        run: echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: 🛠️ Build & Push Client
        if: ${{ fromJSON(needs.changes.outputs.client) }}
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          no-cache: true
          tags: thoomaas123/sc-planner-client:staging-${{ steps.short_sha.outputs.sha_short }}

      - name: 🛠️ Build & Push Server
        if: ${{ fromJSON(needs.changes.outputs.server) }}
        uses: docker/build-push-action@v6
        with:
          context: ./server
          push: true
          no-cache: true
          tags: thoomaas123/sc-planner-server:staging-${{ steps.short_sha.outputs.sha_short }}

  deploy:
    name: 🚚 Deploy to Staging
    needs: [changes, build]
    if: |
      always() &&
      !cancelled() &&
      !failure() &&
      (fromJSON(needs.changes.outputs.client) || fromJSON(needs.changes.outputs.server))
    runs-on: ubuntu-22.04
    steps:
      - name: 🔐 SSH & Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          password: ${{ secrets.STAGING_PASSWORD }}
          port: 22
          script: |
            cd /var/www/vhosts/thomasfourties.fr/staging.sc-planner.thomasfourties.fr
            eval $(ssh-agent) && ssh-add ~/.ssh/thomas
            git checkout .
            git pull origin dev

            # Variables
            NEW_TAG="staging-${{ needs.build.outputs.sha_short }}"
            CLIENT_CHANGED="${{ needs.build.outputs.client_changed }}"
            SERVER_CHANGED="${{ needs.build.outputs.server_changed }}"
            
            echo "🔍 Changes detected:"
            echo "   Client changed: $CLIENT_CHANGED"
            echo "   Server changed: $SERVER_CHANGED"
            echo "   New tag: $NEW_TAG"

            if [ -f .env ]; then
              source .env
            fi
            
            if [ "$CLIENT_CHANGED" = "true" ]; then
              export CLIENT_TAG="$NEW_TAG"
              echo "✅ Client changed - Will use new tag: $CLIENT_TAG"
            else
              export CLIENT_TAG="${CLIENT_TAG:-latest}"
              echo "ℹ️  Client unchanged - Keeping current tag: $CLIENT_TAG"
            fi
            
            if [ "$SERVER_CHANGED" = "true" ]; then
              export SERVER_TAG="$NEW_TAG"
              echo "✅ Server changed - Will use new tag: $SERVER_TAG"
            else
              export SERVER_TAG="${SERVER_TAG:-latest}"
              echo "ℹ️  Server unchanged - Keeping current tag: $SERVER_TAG"
            fi

            echo "🔍 Verifying images exist on Docker Hub..."
            
            if [ "$CLIENT_CHANGED" = "true" ]; then
              if ! docker manifest inspect "thoomaas123/sc-planner-client:$CLIENT_TAG" > /dev/null 2>&1; then
                echo "❌ ERROR: Client image thoomaas123/sc-planner-client:$CLIENT_TAG not found!"
                exit 1
              fi
              echo "✅ Client image verified: thoomaas123/sc-planner-client:$CLIENT_TAG"
            fi
            
            if [ "$SERVER_CHANGED" = "true" ]; then
              if ! docker manifest inspect "thoomaas123/sc-planner-server:$SERVER_TAG" > /dev/null 2>&1; then
                echo "❌ ERROR: Server image thoomaas123/sc-planner-server:$SERVER_TAG not found!"
                exit 1
              fi
              echo "✅ Server image verified: thoomaas123/sc-planner-server:$SERVER_TAG"
            fi

            echo "📝 Updating .env file..."
            cp .env .env.backup 2>/dev/null || true
            
            update_env_var() {
              local var_name="$1"
              local var_value="$2"
              
              if grep -q "^${var_name}=" .env 2>/dev/null; then
                sed -i "s/^${var_name}=.*/${var_name}=${var_value}/" .env
              else
                echo "${var_name}=${var_value}" >> .env
              fi
            }
            
            update_env_var "CLIENT_TAG" "$CLIENT_TAG"
            update_env_var "SERVER_TAG" "$SERVER_TAG"
            
            echo "✅ Updated .env:"
            grep -E "(CLIENT_TAG|SERVER_TAG)" .env

            echo "📥 Pulling images..."
            
            if [ "$CLIENT_CHANGED" = "true" ]; then
              echo "📥 Pulling NEW client image: thoomaas123/sc-planner-client:$CLIENT_TAG"
              docker pull "thoomaas123/sc-planner-client:$CLIENT_TAG"
            else
              echo "⏭️  Skipping client pull (unchanged)"
            fi
            
            if [ "$SERVER_CHANGED" = "true" ]; then
              echo "📥 Pulling NEW server image: thoomaas123/sc-planner-server:$SERVER_TAG"
              docker pull "thoomaas123/sc-planner-server:$SERVER_TAG"
            else
              echo "⏭️  Skipping server pull (unchanged)"
            fi

            echo "🚀 Starting deployment..."
            docker-compose -f docker-compose.staging.yml up -d --remove-orphans

            echo "⏳ Waiting for services to start..."
            sleep 15

            echo "📊 Deployment status:"
            docker-compose -f docker-compose.staging.yml ps
            
            echo "🏥 Health checks:"
            
            if curl -f -s http://localhost:3001 > /dev/null; then
              echo "✅ Client (port 3001) is responding"
            else
              echo "❌ Client health check failed"
            fi
            
            if curl -f -s http://localhost:3002/api > /dev/null; then
              echo "✅ Server (port 3002) is responding"
            else
              echo "❌ Server health check failed"
            fi

            echo "🧹 Cleaning up old images..."
            docker image prune -f

            echo "🎉 Deployment completed successfully!"
            echo "📋 Summary:"
            echo "   Client: $CLIENT_TAG $([ "$CLIENT_CHANGED" = "true" ] && echo "(NEW)" || echo "(unchanged)")"
            echo "   Server: $SERVER_TAG $([ "$SERVER_CHANGED" = "true" ] && echo "(NEW)" || echo "(unchanged)")"
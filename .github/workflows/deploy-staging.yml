name: Deploy to Staging Server

on:
  push:
    branches:
      - dev

jobs:
  changes:
    name: üîç Detect Changes
    runs-on: ubuntu-22.04
    outputs:
      client: ${{ steps.filter.outputs.client }}
      server: ${{ steps.filter.outputs.server }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.event.before }}
          filters: |
            client:
              - 'client/**'
              - '.github/workflows/**'
            server:
              - 'server/**'
              - '.github/workflows/**'

  test:
    name: üß™ Test Server
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Install server dependencies
        run: |
          cd server
          npm install
      - name: Run tests
        run: |
          cd server
          npm run test

  build-client:
    name: üöÄ Build & Push Client
    needs: changes
    if: ${{ needs.changes.outputs.client == 'true' }}
    runs-on: ubuntu-22.04
    outputs:
      sha_short: ${{ steps.short_sha.outputs.sha_short }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üî¢ Extract short SHA
        id: short_sha
        run: echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: üõ†Ô∏è Build & Push Client
        uses: docker/build-push-action@v6
        with:
          context: '{{defaultContext}}:client'
          push: true
          tags: thoomaas123/sc-planner-client:staging-${{ steps.short_sha.outputs.sha_short }}

  build-server:
    name: üöÄ Build & Push Server
    needs: changes
    if: ${{ needs.changes.outputs.server == 'true' }}
    runs-on: ubuntu-22.04
    outputs:
      sha_short: ${{ steps.short_sha.outputs.sha_short }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üî¢ Extract short SHA
        id: short_sha
        run: echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: üõ†Ô∏è Build & Push Server
        uses: docker/build-push-action@v6
        with:
          context: '{{defaultContext}}:server'
          push: true
          tags: thoomaas123/sc-planner-server:staging-${{ steps.short_sha.outputs.sha_short }}

  deploy:
    name: üöö Deploy to Staging
    needs: [changes, build-client, build-server]
    if: |
      always() &&
      !cancelled() &&
      !failure() &&
      (needs.changes.outputs.client == 'true' || needs.changes.outputs.server == 'true')
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üîê SSH & Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          password: ${{ secrets.STAGING_PASSWORD }}
          port: 22
          script: |
            cd /var/www/vhosts/thomasfourties.fr/staging.sc-planner.thomasfourties.fr
            eval $(ssh-agent) && ssh-add ~/.ssh/thomas
            git checkout .
            git pull origin dev

            # Utiliser le SHA du job client ou server (ils sont identiques)
            export TAG=staging-${{ needs.build-client.outputs.sha_short || needs.build-server.outputs.sha_short }}
            export CLIENT_BUILT=${{ needs.changes.outputs.client }}
            export SERVER_BUILT=${{ needs.changes.outputs.server }}

            # Mettre √† jour seulement les tags des images qui ont √©t√© construites
            SERVICES_TO_UPDATE=""
            
            if [ "$CLIENT_BUILT" = "true" ]; then
              echo "Updating client image tag to $TAG"
              sed -i "s|image: thoomaas123/sc-planner-client:.*|image: thoomaas123/sc-planner-client:$TAG|" docker-compose.staging.yml
              SERVICES_TO_UPDATE="$SERVICES_TO_UPDATE client"
            fi

            if [ "$SERVER_BUILT" = "true" ]; then
              echo "Updating server image tag to $TAG"
              sed -i "s|image: thoomaas123/sc-planner-server:.*|image: thoomaas123/sc-planner-server:$TAG|" docker-compose.staging.yml
              SERVICES_TO_UPDATE="$SERVICES_TO_UPDATE server"
            fi

            # Faire le pull seulement des services mis √† jour et red√©marrer
            if [ -n "$SERVICES_TO_UPDATE" ]; then
              echo "Pulling and updating services: $SERVICES_TO_UPDATE"
              docker-compose -f docker-compose.staging.yml pull $SERVICES_TO_UPDATE
              docker-compose -f docker-compose.staging.yml up -d --remove-orphans
            fi

            docker image prune -a -f

name: Deploy to Staging Server

on:
  push:
    branches:
      - dev

jobs:
  changes:
    name: Check for changes
    runs-on: ubuntu-22.04
    outputs:
      client: ${{ steps.changes.outputs.client }}
      server: ${{ steps.changes.outputs.server }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          base: ${{ github.event.before }}
          filters: |
            client:
              - 'client/**'
              - '.github/workflows/**'
            server:
              - 'server/**'
              - '.github/workflows/**'

  build:
    name: Build and Push Images
    needs: changes
    if: ${{ needs.changes.outputs.client == 'true' || needs.changes.outputs.server == 'true' }}
    runs-on: ubuntu-22.04
    outputs:
      sha_short: ${{ steps.short_sha.outputs.sha_short }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract short SHA
        id: short_sha
        run: echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Build and push Client
        if: ${{ needs.changes.outputs.client == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: '{{defaultContext}}:client'
          push: true
          tags: thoomaas123/sc-planner-client:staging-${{ steps.short_sha.outputs.sha_short }}

      - name: Build and push Server
        if: ${{ needs.changes.outputs.server == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: '{{defaultContext}}:server'
          push: true
          tags: thoomaas123/sc-planner-server:staging-${{ steps.short_sha.outputs.sha_short }}

  deploy:
    name: Deploy to Staging Server
    needs: build
    if: always() && !failure() && !cancelled()
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SSH to staging server and deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          password: ${{ secrets.STAGING_PASSWORD }}
          port: 22
          script: |
            cd /var/www/vhosts/thomasfourties.fr/staging.sc-planner.thomasfourties.fr
            eval $(ssh-agent) && ssh-add ~/.ssh/thomas
            git pull origin dev

            export TAG=staging-${{ needs.build.outputs.sha_short }}

            sed -i "s|image: thoomaas123/sc-planner-client:.*|image: thoomaas123/sc-planner-client:$TAG|" docker-compose.staging.yml
            sed -i "s|image: thoomaas123/sc-planner-server:.*|image: thoomaas123/sc-planner-server:$TAG|" docker-compose.staging.yml

            docker-compose -f docker-compose.staging.yml pull
            docker-compose -f docker-compose.staging.yml up -d --remove-orphans

            docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | while read -r line; do
              image_tag=$(echo $line | awk '{print $1}')
              image_id=$(echo $line | awk '{print $2}')
              in_use=$(docker ps -a --format "{{.Image}}" | grep -w "$image_tag" || true)
              is_staging=$(echo $image_tag | grep -E 'staging-[a-f0-9]{7}$' || true)
              if [[ -z "$in_use" && -z "$is_staging" ]]; then
                echo "Removing image: $image_tag ($image_id)"
                docker rmi -f "$image_id" || true
              fi
            done

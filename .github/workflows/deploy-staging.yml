name: Deploy to Staging Server

on:
  push:
    branches:
      - dev

jobs:
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-22.04
    outputs:
      client: ${{ steps.filter.outputs.client }}
      server: ${{ steps.filter.outputs.server }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.event.before }}
          filters: |
            client:
              - 'client/**'
            server:
              - 'server/**'

  test:
    name: 🧪 Unit Tests Only
    needs: changes
    if: ${{ fromJSON(needs.changes.outputs.server) }}
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: sc-planner-db-test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Install server dependencies
        run: |
          cd server
          npm install
      - name: Run unit tests only
        run: |
          cd server
          npx jest --testPathIgnorePatterns=".*\\.e2e-spec\\.ts"

  build:
    name: 🚀 Build & Push Images
    needs: changes
    if: ${{ fromJSON(needs.changes.outputs.client) || fromJSON(needs.changes.outputs.server) }}
    runs-on: ubuntu-22.04
    outputs:
      sha_short: ${{ steps.short_sha.outputs.sha_short }}
      client_changed: ${{ fromJSON(needs.changes.outputs.client) }}
      server_changed: ${{ fromJSON(needs.changes.outputs.server) }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🔢 Extract short SHA
        id: short_sha
        run: echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: 🛠️ Build & Push Client
        if: ${{ fromJSON(needs.changes.outputs.client) }}
        uses: docker/build-push-action@v6
        with:
          context: ./client
          push: true
          no-cache: true
          tags: |
            thoomaas123/sc-planner-client:staging-${{ steps.short_sha.outputs.sha_short }}
            thoomaas123/sc-planner-client:staging-latest

      - name: 🛠️ Build & Push Server
        if: ${{ fromJSON(needs.changes.outputs.server) }}
        uses: docker/build-push-action@v6
        with:
          context: ./server
          push: true
          no-cache: true
          tags: |
            thoomaas123/sc-planner-server:staging-${{ steps.short_sha.outputs.sha_short }}
            thoomaas123/sc-planner-server:staging-latest

  deploy:
    name: 🚚 Deploy to Staging
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: 🔐 SSH & Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          password: ${{ secrets.STAGING_PASSWORD }}
          port: 22
          script: |
            cd /var/www/vhosts/thomasfourties.fr/staging.sc-planner.thomasfourties.fr
            eval $(ssh-agent) && ssh-add ~/.ssh/thomas
            git checkout .
            git pull origin dev

            NEW_TAG="staging-${{ needs.build.outputs.sha_short }}"
            CLIENT_CHANGED="${{ needs.build.outputs.client_changed }}"
            SERVER_CHANGED="${{ needs.build.outputs.server_changed }}"

            if [ -f .env ]; then source .env; fi

            export CLIENT_TAG="${CLIENT_CHANGED:+$NEW_TAG}"
            export CLIENT_TAG="${CLIENT_TAG:-staging-latest}"

            export SERVER_TAG="${SERVER_CHANGED:+$NEW_TAG}"
            export SERVER_TAG="${SERVER_TAG:-staging-latest}"

            cp .env .env.backup 2>/dev/null || true

            update_env_var() {
              local var_name="$1"
              local var_value="$2"
              if grep -q "^${var_name}=" .env 2>/dev/null; then
                sed -i "s/^${var_name}=.*/${var_name}=${var_value}/" .env
              else
                echo "${var_name}=${var_value}" >> .env
              fi
            }

            update_env_var "CLIENT_TAG" "$CLIENT_TAG"
            update_env_var "SERVER_TAG" "$SERVER_TAG"

            if [ "$CLIENT_CHANGED" = "true" ]; then
              docker pull "thoomaas123/sc-planner-client:$CLIENT_TAG"
            fi

            if [ "$SERVER_CHANGED" = "true" ]; then
              docker pull "thoomaas123/sc-planner-server:$SERVER_TAG"
            fi

            docker-compose -f docker-compose.staging.yml up -d --remove-orphans
            sleep 15
            docker-compose -f docker-compose.staging.yml ps

            curl -f -s http://localhost:3001 > /dev/null && echo "✅ Client OK" || echo "❌ Client failed"
            curl -f -s http://localhost:3002/api > /dev/null && echo "✅ Server OK" || echo "❌ Server failed"

            docker image prune -f
import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UseGuards,
  Request,
  Query,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiParam,
  ApiQuery,
} from '@nestjs/swagger';
import { TasksService } from './tasks.service';
import { CreateTaskDto } from './dto/create-task.dto';
import { UpdateTaskDto } from './dto/update-task.dto';
import { Task } from './entities/task.entity';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';

@ApiTags('tasks')
@Controller('tasks')
@UseGuards(JwtAuthGuard)
@ApiBearerAuth()
export class TasksController {
  constructor(private readonly tasksService: TasksService) {}

  @Post()
  @ApiOperation({ summary: 'Cr√©er une nouvelle t√¢che' })
  @ApiResponse({
    status: 201,
    description: 'La t√¢che a √©t√© cr√©√©e avec succ√®s.',
    type: Task,
  })
  @ApiResponse({ status: 400, description: 'Donn√©es invalides.' })
  @ApiResponse({ status: 401, description: 'Non autoris√©.' })
  create(@Body() createTaskDto: CreateTaskDto, @Request() req): Promise<Task> {
    console.log('User from request:', req.user);
    if (!req.user || !req.user.userId) {
      throw new Error('User not authenticated or user ID missing');
    }
    return this.tasksService.create(createTaskDto, req.user.userId);
  }

  @Get()
  @ApiOperation({ summary: 'R√©cup√©rer toutes les t√¢ches' })
  @ApiResponse({
    status: 200,
    description: 'Liste de toutes les t√¢ches r√©cup√©r√©e avec succ√®s.',
    type: [Task],
  })
  @ApiResponse({ status: 401, description: 'Non autoris√©.' })
  findAll(): Promise<Task[]> {
    return this.tasksService.findAll();
  }

  @Get('my-tasks')
  @ApiOperation({ summary: "R√©cup√©rer les t√¢ches de l'utilisateur connect√©" })
  @ApiResponse({
    status: 200,
    description: 'T√¢ches de l\'utilisateur r√©cup√©r√©es avec succ√®s.',
    type: [Task],
  })
  @ApiResponse({ status: 401, description: 'Non autoris√©.' })
  findMyTasks(@Request() req): Promise<Task[]> {
    return this.tasksService.findByUser(req.user.userId);
  }

  @Get('assigned-to-me')
  @ApiOperation({ summary: "R√©cup√©rer les t√¢ches assign√©es √† l'utilisateur connect√©" })
  @ApiResponse({
    status: 200,
    description: 'T√¢ches assign√©es r√©cup√©r√©es avec succ√®s.',
    type: [Task],
  })
  @ApiResponse({ status: 401, description: 'Non autoris√©.' })
  findAssignedToMe(@Request() req): Promise<Task[]> {
    console.log('üë§ Utilisateur dans findAssignedToMe:', req.user);
    console.log('üîç Recherche des t√¢ches pour userId:', req.user?.userId);
    return this.tasksService.findAssignedTo(req.user.userId);
  }

  @Get('created-by-me')
  @ApiOperation({ summary: "R√©cup√©rer les t√¢ches cr√©√©es par l'utilisateur connect√©" })
  @ApiResponse({
    status: 200,
    description: 'T√¢ches cr√©√©es r√©cup√©r√©es avec succ√®s.',
    type: [Task],
  })
  @ApiResponse({ status: 401, description: 'Non autoris√©.' })
  findCreatedByMe(@Request() req): Promise<Task[]> {
    return this.tasksService.findCreatedBy(req.user.userId);
  }

  @Get('user/:userId')
  @ApiOperation({ summary: "R√©cup√©rer les t√¢ches d'un utilisateur sp√©cifique" })
  @ApiParam({ name: 'userId', description: "ID de l'utilisateur" })
  @ApiResponse({
    status: 200,
    description: 'T√¢ches de l\'utilisateur r√©cup√©r√©es avec succ√®s.',
    type: [Task],
  })
  @ApiResponse({ status: 401, description: 'Non autoris√©.' })
  findByUser(@Param('userId') userId: string): Promise<Task[]> {
    return this.tasksService.findByUser(userId);
  }

  @Get(':id')
  @ApiOperation({ summary: 'R√©cup√©rer une t√¢che par son ID' })
  @ApiParam({ name: 'id', description: 'ID de la t√¢che' })
  @ApiResponse({
    status: 200,
    description: 'T√¢che r√©cup√©r√©e avec succ√®s.',
    type: Task,
  })
  @ApiResponse({ status: 404, description: 'T√¢che non trouv√©e.' })
  @ApiResponse({ status: 401, description: 'Non autoris√©.' })
  findOne(@Param('id') id: string): Promise<Task> {
    return this.tasksService.findOne(id);
  }

  @Get(':id/dependents')
  @ApiOperation({ summary: 'R√©cup√©rer les t√¢ches qui d√©pendent de cette t√¢che' })
  @ApiParam({ name: 'id', description: 'ID de la t√¢che' })
  @ApiResponse({
    status: 200,
    description: 'T√¢ches d√©pendantes r√©cup√©r√©es avec succ√®s.',
    type: [Task],
  })
  @ApiResponse({ status: 401, description: 'Non autoris√©.' })
  findDependentTasks(@Param('id') id: string): Promise<Task[]> {
    return this.tasksService.findDependentTasks(id);
  }

  @Patch(':id')
  @ApiOperation({ summary: 'Mettre √† jour une t√¢che' })
  @ApiParam({ name: 'id', description: 'ID de la t√¢che' })
  @ApiResponse({
    status: 200,
    description: 'T√¢che mise √† jour avec succ√®s.',
    type: Task,
  })
  @ApiResponse({ status: 404, description: 'T√¢che non trouv√©e.' })
  @ApiResponse({ status: 400, description: 'Donn√©es invalides.' })
  @ApiResponse({ status: 401, description: 'Non autoris√©.' })
  update(@Param('id') id: string, @Body() updateTaskDto: UpdateTaskDto): Promise<Task> {
    return this.tasksService.update(id, updateTaskDto);
  }

  @Delete(':id')
  @ApiOperation({ summary: 'Supprimer une t√¢che' })
  @ApiParam({ name: 'id', description: 'ID de la t√¢che' })
  @ApiResponse({
    status: 200,
    description: 'T√¢che supprim√©e avec succ√®s.',
  })
  @ApiResponse({ status: 404, description: 'T√¢che non trouv√©e.' })
  @ApiResponse({ status: 401, description: 'Non autoris√©.' })
  remove(@Param('id') id: string): Promise<void> {
    return this.tasksService.remove(id);
  }
} 